const usePreloadImages = images => {
    const preloadImages = useRef([])
    const [_images, setImages] = useState(
        images.map(image => ({
            ...image,
            original: image.thumbnail,
            imageSet: null,
            originalAlt: `${altPrefix}${image.originalAlt}`,
            thumbnailAlt: `${altPrefix}${image.thumbnailAlt}`,
    })))
    
    useEffect(() => {
        images.map(image => {
            const _image = new Image()
            _image.src = url
            _image.onload = () => {
                const found = preloadImages.current.find(i => i.url === url)
                if (found) {
                    found.loaded = true
                    const countLoaded = preloadImages.current.filter(
                        ({ loaded }) => loaded
                    ).length
                    const countPreloaded = preloadImages.current.length
                    const allLoaded = countLoaded === countPreloaded
                    if (allLoaded) {
                        setImages(preloadImages.current)
                    }
                }
            }

            const _alt = `${altPrefix}${alt}`
            const _image = {
                original: require('static/img/loading.jpg'),
                thumbnail: require('static/img/loading.jpg'),
                thumbnailClass: 'thumb',
                originalAlt: _alt,
                thumbnailAlt: _alt,
            }
            preloadImages.current.push({
                image: _image,
                url,
                loaded: false,
                ..._image,
                original: url,
                thumbnail: url,
            })
        })
    }, [])
    return _images
}

                    <link
                        href="https://fonts.googleapis.com/css?family=Lato:300,300i,400,400i,700|Oswald:400,500,600|Crimson+Pro:400,400i,600&display=swap"
                        rel="stylesheet"
                        // as="style"
                        // onLoad="this.onload=null;this.rel='stylesheet'"
                    />

            // window.addEventListener('resize', () => {
            // let vh = window.innerHeight * 0.01
            // document.documentElement.style.setProperty('--vh', `${vh}px`)
            // })

const fixChromeReactBug = () => {
    const EVENTS_TO_MODIFY = [
        'touchstart',
        'touchmove',
        'touchend',
        'touchcancel',
        'wheel',
    ]

    const originalAddEventListener = document.addEventListener.bind()
    document.addEventListener = (type, listener, options, wantsUntrusted) => {
        let modOptions = options
        if (EVENTS_TO_MODIFY.includes(type)) {
            if (typeof options === 'boolean') {
                modOptions = {
                    capture: options,
                    passive: false,
                }
            } else if (typeof options === 'object') {
                modOptions = {
                    ...options,
                    passive: false,
                }
            }
        }

        return originalAddEventListener(type, listener, modOptions, wantsUntrusted)
    }

    const originalRemoveEventListener = document.removeEventListener.bind()
    document.removeEventListener = (type, listener, options) => {
        let modOptions = options
        if (EVENTS_TO_MODIFY.includes(type)) {
            if (typeof options === 'boolean') {
                modOptions = {
                    capture: options,
                    passive: false,
                }
            } else if (typeof options === 'object') {
                modOptions = {
                    ...options,
                    passive: false,
                }
            }
        }
        return originalRemoveEventListener(type, listener, modOptions)
    }
}

                <ReactToPrint
                    trigger={() => (
                        <Box position="absolute" top={1} left={[1, '80%']}>
                            <button className="btn" bg="white">
                                PRINT
                            </button>
                        </Box>
                    )}
                    content={() => ref.current}
                />
                <Flex
                    ref={ref}


